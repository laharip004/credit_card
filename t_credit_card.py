# -*- coding: utf-8 -*-
"""T_Credit_card.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18RrD-Q-49iPvwh8AIM3KsfTqvxtSD_xD
"""

import pandas as pd

# Load data
df = pd.read_csv('/content/creditcard.csv')

# Inspect data
print(df.info())
print(df.describe())
print(df['Class'].value_counts())

# Check for missing values
print(df.isnull().sum())

# If there are missing values, you can either fill them or drop rows/columns
# df = df.fillna(method='ffill')  # Example: forward fill
df = df.dropna()  # Example: drop rows with missing values

from sklearn.preprocessing import StandardScaler

# Separate features and target
X = df.drop('Class', axis=1)
y = df['Class']

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

from imblearn.over_sampling import SMOTE

# Apply SMOTE
smote = SMOTE()
X_resampled, y_resampled = smote.fit_resample(X_scaled, y)

from sklearn.model_selection import train_test_split

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42, stratify=y_resampled)

!pip install catboost
!pip install xgboost catboost lightgbm scikit-learn imbalanced-learn

!pip install lightgbm


from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
from catboost import CatBoostClassifier
import lightgbm as lgb

# Initialize models
models = {
    'Logistic Regression': LogisticRegression(max_iter=2000),
    'Random Forest': RandomForestClassifier(),
    'XGBoost': XGBClassifier(),
    'Gradient Boosting': GradientBoostingClassifier(),
    'CatBoost': CatBoostClassifier(silent=True),
    'LightGBM': lgb.LGBMClassifier()
}

from sklearn.metrics import accuracy_score, f1_score

model_results = {}

for model_name, model in models.items():
    # Train model
    model.fit(X_train, y_train)

    # Predictions
    y_pred = model.predict(X_test)

    # Evaluate
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    model_results[model_name] = {
        'Accuracy': accuracy,
        'F1 Score': f1
    }

# Display results
results_df = pd.DataFrame(model_results).T
print(results_df)







